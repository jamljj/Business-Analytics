#这里面包含了一些个人在使用sql语句进行数据库查询时的一些小技巧  

##sql代码执行逻辑顺序
1. FROM & JOIN —— 先确定数据来源
2. WHERE —— 过滤行
3. GROUP BY（如果有的话）
4. HAVING（如果有的话）在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。HAVING 子句可以让我们筛选分组后的各组数据。
5. SELECT —— 选择要返回的列
6. DISTINCT（如果有的话）
7. ORDER BY —— 进行排序
8. LIMIT（如果有的话）


##sql重要知识点
（1）窗口函数
窗口函数的通俗解释：用于在查询结果的特定窗口（即一组行）上执行计算，而不会像 GROUP BY 那样将结果合并到单行。窗口函数通常与 OVER() 子句结合使用。
基本语法：窗口函数（）over（partition by 分区列 order by 排序列）
  PARTITION BY：可选，将数据按某列进行分组，每个组独立计算窗口函数。
  ORDER BY：可选，定义窗口内的排序方式。
窗口函数：如 RANK()、DENSE_RANK()、ROW_NUMBER()、SUM()、AVG() 、LAG()和LEAD()等。其中的三种排名函数需要注意一下他们处理相同值的方式
（2）各种连接之间的区别
连接类型	语法示例	说明	返回结果
内连接（INNER JOIN）	sql SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;	仅返回满足连接条件的行，即两个表中匹配的行	仅包含匹配的行
左连接（LEFT JOIN 或 LEFT OUTER JOIN）	sql SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;	返回左表的所有行，以及右表中匹配的行，若右表无匹配行则用 NULL 填充	包含左表全部行，右表匹配行或 NULL
右连接（RIGHT JOIN 或 RIGHT OUTER JOIN）	sql SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;	返回右表的所有行，以及左表中匹配的行，若左表无匹配行则用 NULL 填充	包含右表全部行，左表匹配行或 NULL
全外连接（FULL OUTER JOIN）	sql SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;	返回两个表的所有行，若某行在另一表无匹配项则用 NULL 填充	包含两个表的全部行，无匹配用 NULL 填充
交叉连接（CROSS JOIN）	sql SELECT * FROM table1 CROSS JOIN table2;	返回两个表的笛卡尔积，即左表每行与右表每行组合	行数为两表行数乘积
（3）在实际应用 SQL 连接函数时的注意事项
1. 连接条件的准确性
- 确保关联列匹配：连接操作是基于连接条件进行的，关联列的数据类型和含义要一致。例如，在连接 orders 表和 customers 表时，用于连接的 customer_id 列在两个表中数据类型要相同，否则可能导致连接结果不符合预期。
- 避免模糊或错误的条件：错误的连接条件可能产生大量无意义的数据或遗漏重要信息。比如，若错误地将日期列进行不恰当的连接条件设置，可能会使结果集不准确。
2. 性能问题
- 索引的使用：在连接列上创建合适的索引可以显著提高连接操作的性能。如果经常基于 customer_id 进行连接操作，那么在 orders 表和 customers 表的 customer_id 列上创建索引能加快查询速度。
- 大表连接：当连接的表数据量非常大时，连接操作可能会消耗大量的资源和时间。可以考虑先对表进行筛选（使用 WHERE 子句），减少参与连接的数据量。
3. 结果集的大小和准确性
- 笛卡尔积风险：使用交叉连接（CROSS JOIN）时会产生笛卡尔积，结果集的行数是两个表行数的乘积，可能导致结果集过大。要谨慎使用交叉连接，确保有明确的业务需求。
- 空值处理：在使用外连接（左连接、右连接、全外连接）时，要考虑结果集中可能出现的空值情况。空值可能会对后续的计算或分析产生影响，需要进行适当的处理。
4. 数据库兼容性
- 语法差异：不同的数据库系统对连接函数的语法和功能支持可能存在差异。例如，MySQL 8.0 之前的版本不支持 FULL OUTER JOIN，在编写跨数据库的 SQL 代码时，要确保所使用的连接语法在目标数据库中是兼容的。
5. 业务逻辑的匹配
- 选择合适的连接类型：根据业务需求选择合适的连接类型。如果只需要获取两个表中匹配的记录，使用内连接；如果需要保留一个表的所有记录，使用左连接或右连接；如果要获取两个表的所有记录，使用全外连接。
6. 数据一致性
- 数据更新影响：在对连接的表进行数据更新、插入或删除操作时，要考虑对连接结果的影响。确保数据的一致性，避免出现数据不一致导致连接结果错误的情况。

##SQL查询语句的注意事项
1. 聚合函数不能放在WHERE子句中！！！  
  聚合函数的使用之前，需要先明确无误的确定数据的范围；在WHERE中使用聚合函数是万万不能的，这在逻辑上就说不通，MySQL自然也不支持这样做！！！
  因为聚合函数是对数据表的一列进行的计算操作，这个前提就是这一列的数据是要确定了，但是where方法是属于还在确定数据集的过程了，这就造成了逻辑的混乱。
聚合函数并不一定非得写在SELECT子句中，只要WHERE子句执行完了之后，后续执行的子句中都可以使用聚合函数
2. Having子句需要写在GROPY BY子句的后面
3，在Having子句中，拿聚合函数跟具体的数据做比较是没有问题的，比如“HAVING COUNT(*)>=2;”是没有问题的；但是，拿聚合函数跟某个字段作条件判断是不行的，这个必须用表连接才能实现。
4. 当使用order by 进行多列排序时，如果需要的是降序排序，那么每一个列名后面都需要加上一个desc，升序则不用。  
  因为order by 的默认关键字是asc，如果不都加上的话，没有加desc的列就会升序排序
